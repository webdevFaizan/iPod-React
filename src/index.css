body {
  margin: 0;
  height: 98vh;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-image:  linear-gradient(to bottom, rgba(245, 246, 252, 0.52), rgba(210, 253, 131, 0.73)), url("background.jpg");
  background-size: cover;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


/* The global App container - */
.App {
	margin: 1% auto 0px auto;
	width: min-content;
	/* IMPORTANT : This property is used to get us the maximum of all the contents inside the App container, then the width will be calculated as per it, just bigger than this. */
	/* If the container is small then this will take the container's height, if the container is big it will take its height. */
	padding: 20px 10px 5px 10px;
	border-radius: 20px;
	background-image: url("https://img.freepik.com/free-vector/gradient-colorful-technology-background_52683-74698.jpg?w=1380&t=st=1663853972~exp=1663854572~hmac=799dfce1f3f7538fd75f7087f5aa76dabd1fcb90c03f35af8ebc182bf6dc4c46");
	box-shadow: 0px 0px 12px 2px black;
    background-size: cover;
    position:relative;
    transition: transform ease-in-out 0.2s;
}



/* All Buttons related css is here. */
.buttons-container {
	width: 260px;
	height: 260px;
	border: 3px solid black;
	margin: 10px auto 0px auto;
	border-radius: 50%;
	position: relative;
	display: flex;
	justify-content: center;
	align-items: center;
    background-color: rgb(214, 214, 214);
    transition: transform ease-in-out 0.2s;
}
.center-circle {
	width: 50%;
	height: 50%;
	background-color: rgb(90, 90, 90);
	border-radius: inherit;
  /* border: 2px solid red; */
	display: flex;
	justify-content: center;
	align-items: center;
	color: white;
	outline: none;
	/* border: none; */
}

.menu-button {
	position: absolute;
	top: 0px;
	height: 25%;
	width: 50%;
	display: flex;
	justify-content: center;
  /* border: 2px solid red; */
	align-items: center;
	border-radius: 37% 37% 0% 0%;
	font-size: 30px;
  border: none;
	outline: none;
	
	background-color: transparent;
	color: rgb(78, 78, 78);
}
.left-button {
	position: absolute;
	left: 0px;
	width: 25%;
	height: 50%;
	display: flex;
  /* border: 2px solid red; */
	justify-content: center;
	align-items: center;
	border-radius: 37% 0% 0% 37%;
	font-size: 30px;
  border: none;
	outline: none;
	
	background-color: transparent;
	color: rgb(78, 78, 78);
}
.right-button {
	position: absolute;
	right: 0px;
	width: 25%;
	height: 50%;
	display: flex;
	justify-content: center;
	align-items: center;
	border-radius: 0% 37% 37% 0%;
	font-size: 30px;
  border: none;
	outline: none;
	
	background-color: transparent;
	color: rgb(78, 78, 78);
}
.play-pause {
	position: absolute;
	bottom: 0px;
	height: 25%;
	width: 50%;
	display: flex;
	justify-content: center;
	align-items: center;
	border-radius: 0px 0% 37% 37%;
	font-size: 30px;
	outline: none;	
  	border: none;
	background-color: transparent;
	color: rgb(78, 78, 78);
}


/* ------------ Screen Container -------------- */
.screen-container {
	width: 350px;	
	/* This height and width is predefined to make the image and the continer of this size. */
	height: 350px;
	margin: 10px auto;
	background-image: url("./peakpx.jpg");	
	/* IMPORTANT : This is a new way of importing the static images. */
	background-position: center;
	background-repeat: no-repeat;
	background-size: cover;
	overflow: hidden;
	position: relative;
	/* The position is set to be relative, so any children inside this class that would be having position as absolute will be with relation to this. */
    border-radius: 20px;
    transition: transform ease-in-out 0.2s;
}




/* --------------- Menu items --------------- */
.screen-menu {
	width: 0%;
	height: 100%;
	position: absolute;
	z-index: 5;
	left: 0%;
	background-color: white;
	/* box-shadow: none; */
	overflow-x: hidden;
	box-shadow: 5px 10px white;
	transition: width ease-in-out 0.2s;
	/* When ever the width of this item changes, then then this will be done with the help of transition, so an animation flow will be created.*/
}

.width-50 {
	width: 50% !important;
	/* The initial width of the item was set to be 0% but now the width is increased this means when ever we toggle between selecting and adding the width-50 element in the container then the width will be set and this when done with the help of transition, will create an animation effect. */
	box-shadow: 0px 0px 12px 1px rgb(82, 82, 82) !important;
}


/* Here I could have mentioned this class as the child class of screen-menu. Like this - .screen-menu > .selected but instead I just used the class directly, this will have no issue in this case, since the selected class is only present inside the .screen-menu */
.selected {
	background-color: rgb(157, 206, 24);
	color: white
}

/* The following is the child combinator, The > combinator selects nodes that are direct children of the first element. Syntax: A > B Example: ul > li will match all <li> elements that are nested directly inside a <ul> element. */
.screen-menu > div {
	display: flex;
	justify-content: center;
	align-items: center;
	width: 100%;
	height: 20%;
	border: 1px solid rgb(190, 190, 190);
	box-sizing: border-box;
	white-space: nowrap; /* to turn off text wrapping in the screen menu */
}



.screen-game {
	height: 100%;
	width: 100%;
	background-color: rgba(255, 255, 255, 0.9);
	box-sizing: border-box;
	overflow: hidden;
}


.loading-screen{
	background-image: url("https://img.freepik.com/free-vector/neon-lights-background-theme_52683-44625.jpg?w=1060&t=st=1663877883~exp=1663878483~hmac=76aa885acc9469bbe2c7b99df738bcf0d7f8d2cab7385f4e7ae61a4dd562f65e");
	background-position: center;
	height: 100%;
	color: white;
}


.loader{
	display: flex;
	justify-content: center;
	align-items: center;
	color: white;
}





/* ALL SONGS SCREEN ///////////////////////////////////////////////////////////// */
.all-songs {
	height: 100%;
	width: 100%;
	background-color: rgba(255, 255, 255, 0.9);
	box-sizing: border-box;
	/* border-box tells the browser to account for any border and padding in the values you specify for an element's width and height. If you set an element's width to 100 pixels, that 100 pixels will include any border or padding you added, and the content box will shrink to absorb that extra width. This is done in order to keep the maximum box size fixed, and the content inside it will adjust according to that fixed length */
	overflow: hidden;
}
.all-songs-heading {
	padding-bottom: 10px;
	background-color: #e48537;
	margin: 0px;
	height: 15%;
	color: white;
}
.all-songs-list {
	background-color: #5a4e72;
	height: 85%;
}
.all-songs-list > div {
	display: flex;
	justify-content: center;
	align-items: center;
	border: 1px solid rgb(0, 0, 0);
	width: 100%;
	height: 14%;
	/* IMPORTANT : If this height is removed and the height of its container is kept the same, this will be a problem, since the container height is like the pulling the height as upto 85% but if we push the height of each element internally to be 14% then this is going to be more effective. */
	color: white;
}


/* This animation is the dimming animation for highlighting the change in navigation buttons. */
@keyframes highlight
{
    0%
    {
        color:rgb(41, 30, 189);
    }
    50%
    {
        color:white;
    }
    100%
    {
        color:rgb(41, 30, 189);
    }
}

.instruction-all-songs {
	height: 20%;
	background-color: #17a2b8;
    color: white;

    animation-name: highlight;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-play-state: running;
}
.selected-song {
	background-color: #45bd21;
}



/* The following class is going to work in the case when the music starts playing, then the tutton-container has an infinite loop of change in colors.  */
.colored {
    transition:background-color ease-in-out 0.2s;
	animation-name: background-gradient-animation;
	animation-duration: 5s;
	animation-timing-function: ease-in-out;
	animation-iteration-count: infinite;
	color: white;
    opacity: 0.9;
}
.colored svg {
	color: white;
}
.colored .center-circle {
	background-color: black;
}